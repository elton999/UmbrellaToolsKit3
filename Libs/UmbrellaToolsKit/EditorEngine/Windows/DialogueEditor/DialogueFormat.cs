// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using UmbrellaToolsKit.EditorEngine.Windows.DialogueEditor;
//
//    var dialogueFormat = DialogueFormat.FromJson(jsonString);

using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace UmbrellaToolsKit.EditorEngine.Windows.DialogueEditor
{
    public partial class DialogueFormat
    {
        [JsonProperty("ids")]
        public List<int> Ids { get; set; }

        [JsonProperty("startNode")]
        public int StartNode { get; set; }

        [JsonProperty("nodes")]
        public List<Node> Nodes { get; set; }
    }

    public partial class Node
    {
        [JsonProperty("id")]
        public int Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("sprite")]
        public string Sprite { get; set; }

        [JsonProperty("content")]
        public string Content { get; set; }

        [JsonProperty("options")]
        public List<int> Options { get; set; }

        [JsonProperty("nextNode")]
        public int NextNode { get; set; }
    }

    public partial class DialogueFormat
    {
        public static DialogueFormat FromJson(string json) => JsonConvert.DeserializeObject<DialogueFormat>(json, UmbrellaToolsKit.EditorEngine.Windows.DialogueEditor.Converter.Settings);

        public Node GetFirstNode() => GetNodeById(StartNode);

        public Node GetNodeById(int id)
        {
            foreach (var node in Nodes)
                if (node.Id == id)
                    return node;
            return null;
        }
    }

    public static class Serialize
    {
        public static string ToJson(this DialogueFormat self) => JsonConvert.SerializeObject(self, UmbrellaToolsKit.EditorEngine.Windows.DialogueEditor.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}